                #region illagel code

                // http://visual6502.org/wiki/index.php?title=6502_all_256_Opcodes
                // http://macgui.com/kb/article/46

                //do nothing
                case 0x1A:
                case 0x3A:
                case 0x5A:
                case 0x7A:
                case 0xDA:
                case 0xFA:
                    break;

                case 0x80:
                case 0x82:
                case 0x89:
                case 0xC2:
                case 0xE2:
                case 0x04:
                case 0x44:
                case 0x64:
                case 0x14:
                case 0x34:
                case 0x54:
                case 0xD4:
                case 0xF4:
                case 0x74:
                    r_PC += 1;
                    break;

                case 0x0C:
                case 0x1C:
                case 0x3C:
                case 0x5C:
                case 0x7C:
                case 0xDC:
                case 0xFC:
                    r_PC += 2;
                    break;

                case 0x6B:
                    b1 = Mem_r(r_PC++);
                    r_A = (byte)(((b1 & r_A) >> 1) | (((byte)flagC) << 7));
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    if ((r_A & 0x40) > 0) flagC = 1; else flagC = 0;
                    if (((r_A << 1 ^ r_A) & 0x40) > 0) flagV = 1; else flagV = 0;
                    break;

                case 0x0B: //ANC
                case 0x2B: //ANC
                    b2 = Mem_r(r_PC++);
                    r_A &= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0X80) > 0) flagC = 1; else flagC = 0;
                    flagN = flagC;
                    break;

                case 0x4B: //ALR
                    b2 = Mem_r(r_PC++);
                    r_A &= b2;
                    if ((r_A & 0x1) != 0) flagC = 1; else flagC = 0;
                    r_A >>= 1;
                    if ((r_A & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0xEB: //illegal sbc imm
                    b2 = Mem_r(r_PC++);
                    b2 ^= 0xFF; //fix
                    i1 = r_A + b2 + (byte)flagC;
                    if ((i1 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if (i1 > 0xff) flagC = 1; else flagC = 0;
                    if ((i1 & 0x80) > 0) flagN = 1; else flagN = 0;
                    if (((i1 ^ r_A) & (i1 ^ b2) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i1;
                    break;

                case 0x03: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    b4 = (byte)(Mem_r(r_PC++) + r_X);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r(us1);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w(us1, b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x07: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w(b1, b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x13: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    b4 = Mem_r(r_PC++);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r((ushort)(us1 + r_Y));
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w((ushort)(us1 + r_Y), b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x17: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    b1 = (byte)((Mem_r(r_PC++) + r_X) & 0xff);
                    b2 = Mem_r(b1);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w(b1, b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x1B: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w(us1, b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x0F: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w(us1, b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x1F: //SLO (  ASL M THEN (M "OR" A) -> A,M  )
                    us4 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    us1 = (ushort)(us4 + r_X);
                    b2 = Mem_r(us1);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    b2 <<= 1;
                    Mem_w(us1, b2);
                    r_A |= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x23: //RLA    ( ROL M  THEN (M "AND" A) -> A )   
                    b4 = (byte)(Mem_r(r_PC++) + r_X);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r(us1);
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w(us1, b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x27: //RLA    ( ROL M  THEN (M "AND" A) -> A )   
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w(b1, b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x2F:// RLA
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w(us1, b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x3F://RLA
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_X);
                    b2 = Mem_r(us1);
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w(us1, b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x3B://RLA
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w(us1, b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x33: //RLA    ( ROL M  THEN (M "AND" A) -> A )   
                    b4 = Mem_r(r_PC++);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r((ushort)(us1 + r_Y));
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w((ushort)(us1 + r_Y), b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x37: //RLA    ( ROL M  THEN (M "AND" A) -> A )   
                    b1 = (byte)((Mem_r(r_PC++) + r_X) & 0xff);
                    b2 = Mem_r(b1);
                    b3 = (byte)(b2 << 1);
                    b3 |= (byte)(flagC);
                    Mem_w(b1, b3);
                    if ((b2 & 0x80) > 0) flagC = 1; else flagC = 0;
                    r_A &= b3;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x43://SRE (LSR M  THEN (M "EOR" A) -> A )
                    b4 = Mem_r(r_PC++);
                    b4 += r_X;
                    a1 = Mem_r(b4);
                    b4++;
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r(us1);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w(us1, b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x47://SRE (LSR M  THEN (M "EOR" A) -> A )
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w(b1, b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x4F://SRE (LSR M  THEN (M "EOR" A) -> A )
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w(us1, b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x5F://SRE  
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_X);
                    b2 = Mem_r(us1);
                    if ((b2 & 1) != 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w(us1, b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0x5B://SRE  
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    if ((b2 & 1) != 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w(us1, b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0x53://SRE (LSR M  THEN (M "EOR" A) -> A )
                    b4 = Mem_r(r_PC++);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r((ushort)(us1 + r_Y));
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w((ushort)(us1 + r_Y), b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x57://SRE (LSR M  THEN (M "EOR" A) -> A )
                    b1 = (byte)((Mem_r(r_PC++) + r_X) & 0xff);
                    b2 = Mem_r(b1);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    b2 >>= 1;
                    Mem_w(b1, b2);
                    r_A ^= b2;
                    if (r_A == 0) flagZ = 1; else flagZ = 0;
                    if ((r_A & 0x80) > 0) flagN = 1; else flagN = 0;
                    break;

                case 0x63:// RRA (ROR M THEN (A + M + C) -> A  )
                    b4 = (byte)(Mem_r(r_PC++) + r_X);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r(us1);
                    byte c = 0x80;
                    if (flagC == 0) c = 0;
                    b3 = (byte)((b2 >> 1) | c);
                    Mem_w(us1, (byte)b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x67:// RRA (ROR M THEN (A + M + C) -> A  )
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    b3 = (byte)((b2 >> 1) | ((flagC == 0) ? 0 : 0x80));
                    Mem_w(b1, (byte)b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x6F://RRA
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    b3 = (byte)((b2 >> 1) | ((flagC == 0) ? 0 : 0x80));
                    Mem_w(us1, b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x73:// RRA (ROR M THEN (A + M + C) -> A  )
                    b4 = Mem_r(r_PC++);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r((ushort)(us1 + r_Y));
                    b3 = (byte)((b2 >> 1) | ((flagC == 0) ? 0 : 0x80));
                    Mem_w((ushort)(us1 + r_Y), (byte)b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x77:// RRA (ROR M THEN (A + M + C) -> A  )
                    b1 = (byte)((Mem_r(r_PC++) + r_X) & 0xff);
                    b2 = Mem_r(b1);
                    b3 = (byte)((b2 >> 1) | ((flagC == 0) ? 0 : 0x80));
                    Mem_w(b1, b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x7B:// RRA (ROR M THEN (A + M + C) -> A  )
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    b3 = (byte)((b2 >> 1) | ((flagC == 0) ? 0 : 0x80));
                    Mem_w(us1, b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x7F: //RRA
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_X);
                    b2 = Mem_r(us1);
                    b3 = (byte)((b2 >> 1) | ((flagC == 0) ? 0 : 0x80));
                    Mem_w(us1, b3);
                    if ((b2 & 1) > 0) flagC = 1; else flagC = 0;
                    i5 = r_A + b3 + (byte)flagC;
                    if ((i5 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if (((i5 ^ r_A) & (i5 ^ b3) & 0x80) != 0) flagV = 1; else flagV = 0;
                    r_A = (byte)i5;
                    if ((i5 >> 8) > 0) flagC = 1; else flagC = 0;
                    if ((i5 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    break;

                case 0x83://SAX ( (A "AND" (MSB(adr)+1)  "AND" X) -> M 
                    b4 = (byte)(Mem_r(r_PC++) + r_X);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r(us1);
                    Mem_w(us1, (byte)(r_X & r_A));
                    break;

                case 0x87://SAX ( (A "AND" (MSB(adr)+1)  "AND" X) -> M 
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    Mem_w(b1, (byte)(r_X & r_A));
                    break;

                case 0x8F://SAX ( (A "AND" (MSB(adr)+1)  "AND" X) -> M 
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    Mem_w(us1, (byte)(r_X & r_A));
                    break;

                case 0x9C://SHY
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r(us1);
                    b3 = (byte)(r_Y & (((us1 & 0xff00) >> 8) + 1));
                    us1 = (ushort)((us1 & 0xff00) | (byte)((us1 & 0xff) + r_X));
                    if ((us1 & 0xff) < r_X) us1 = (ushort)((us1 & 0xff) | (b3 << 8));
                    Mem_w(us1, b3);
                    break;

                case 0x9E://SHX
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r(us1);
                    b3 = (byte)(r_X & (((us1 & 0xff00) >> 8) + 1));
                    us1 = (ushort)((us1 & 0xff00) | (byte)((us1 & 0xff) + r_Y));
                    if ((us1 & 0xff) < r_Y) us1 = (ushort)((us1 & 0xff) | (b3 << 8));
                    Mem_w(us1, b3);
                    break;

                case 0x97://SAX ( (A "AND" (MSB(adr)+1)  "AND" X) -> M 
                    b1 = (byte)((Mem_r(r_PC++) + r_Y) & 0xff);
                    b2 = Mem_r(b1);
                    Mem_w(b1, (byte)(r_X & r_A));
                    break;

                case 0xB7://SAX ( (A "AND" (MSB(adr)+1)  "AND" X) -> M 
                    b1 = (byte)((Mem_r(r_PC++) + r_Y) & 0xff);
                    b2 = Mem_r(b1);
                    r_X = r_A = b2;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xA3://LAX
                    b4 = (byte)(Mem_r(r_PC++) + r_X);
                    a1 = Mem_r(b4++);
                    a2 = Mem_r(b4);
                    b2 = Mem_r((ushort)((a2 << 8) | a1));
                    r_X = r_A = b2;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xA7://LAX
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    r_X = r_A = b2;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xAB://LAX
                    b1 = Mem_r(r_PC++);
                    r_X = r_A = b1;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xAF://LAX
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    r_X = r_A = b2;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xBF://LAX
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    r_X = r_A = b2;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xB3://LAX
                    b4 = Mem_r(r_PC++);
                    a1 = Mem_r(b4);
                    a2 = Mem_r(++b4);
                    us1 = (ushort)((a2 << 8) | a1);
                    b2 = Mem_r((ushort)(us1 + r_Y));
                    r_X = r_A = b2;
                    if (r_X == 0) flagZ = 1; else flagZ = 0;
                    if ((r_X & 0x80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xC3: //DCP
                    b1 = (byte)(Mem_r(r_PC++) + r_X);
                    us3 = (ushort)((Mem_r(b1++) | (Mem_r(b1) << 8)));
                    b2 = Mem_r(us3);
                    Mem_w(us3, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xC7: //DCP
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    Mem_w(b1, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xCB:// AXS
                    b1 = Mem_r(r_PC++);
                    i2 = (r_A & r_X) - b1;
                    if ((i2 & 0x80) != 0) flagN = 1; else flagN = 0;
                    if ((byte)i2 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i2 >> 8) != 0) flagC = 1; else flagC = 0;
                    r_X = (byte)i2;
                    break;

                case 0xCF: //DCP
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    Mem_w(us1, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xDF:
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_X);
                    b2 = Mem_r(us1);
                    Mem_w(us1, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xD3: //DCP
                    b1 = Mem_r(r_PC++);
                    us3 = (ushort)((Mem_r(b1++) | (Mem_r(b1) << 8)) + r_Y);
                    b2 = Mem_r(us3);
                    Mem_w(us3, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xD7: //DCP
                    b1 = (byte)((Mem_r(r_PC++) + r_X) & 0xff);
                    b2 = Mem_r(b1);
                    Mem_w(b1, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xDB:// DCP
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    Mem_w(us1, --b2);
                    i4 = r_A - b2;
                    if (i4 == 0) flagZ = 1; else flagZ = 0;
                    if ((~i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    break;

                case 0xE3://ISC
                    b1 = (byte)(Mem_r(r_PC++) + r_X);
                    us3 = (ushort)((Mem_r(b1++) | (Mem_r(b1) << 8)));
                    b2 = Mem_r(us3);
                    Mem_w(us3, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;

                case 0xE7://ISC
                    b1 = Mem_r(r_PC++);
                    b2 = Mem_r(b1);
                    Mem_w(b1, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;

                case 0xEF://ISC
                    us1 = (ushort)(Mem_r(r_PC++) | (Mem_r(r_PC++) << 8));
                    b2 = Mem_r((ushort)(us1));
                    Mem_w(us1, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;


                case 0xF3://ISC
                    b1 = Mem_r(r_PC++);
                    us3 = (ushort)(((Mem_r(b1++) | (Mem_r(b1) << 8))) + r_Y);
                    b2 = Mem_r(us3);
                    Mem_w(us3, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;

                case 0xF7://ISC
                    b1 = (byte)((Mem_r(r_PC++) + r_X) & 0xff);
                    b2 = Mem_r(b1);
                    Mem_w(b1, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;

                case 0xFB://ISC
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_Y);
                    b2 = Mem_r(us1);
                    Mem_w(us1, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;

                case 0xFF://ISC
                    us1 = (ushort)((Mem_r(r_PC++) | (Mem_r(r_PC++) << 8)) + r_X);
                    b2 = Mem_r(us1);
                    Mem_w(us1, ++b2);
                    i4 = r_A + (b2 ^ 0xff) + (byte)flagC;
                    if (((i4 ^ r_A) & (i4 ^ (b2 ^ 0xff)) & 0x80) != 0) flagV = 1; else flagV = 0;
                    if ((i4 & 0xff) == 0) flagZ = 1; else flagZ = 0;
                    if ((i4) >> 8 != 0) flagC = 1; else flagC = 0;
                    if ((i4 & 0X80) != 0) flagN = 1; else flagN = 0;
                    r_A = (byte)i4;
                    break;
                #endregion

